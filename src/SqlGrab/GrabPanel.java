
package SqlGrab;

import java.awt.Component;
import java.awt.Container;
import java.io.IOException;
import org.openide.util.lookup.ServiceProvider;
import org.sleuthkit.autopsy.corecomponentinterfaces.DataContentViewer;
import org.sleuthkit.datamodel.Content;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import org.sleuthkit.datamodel.AbstractFile;


@ServiceProvider(service = DataContentViewer.class)
public class GrabPanel extends javax.swing.JPanel implements DataContentViewer {
     
    /**
     * Creates new form GrabPanel
     */
    public GrabPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(GrabPanel.class, "GrabPanel.jScrollPane3.TabConstraints.tabTitle"), jScrollPane3); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
   
    //Code borrowed from StackOverflow - all credit to author
    //http://stackoverflow.com/questions/10620448/most-simple-code-to-populate-jtable-from-resultset
    public static DefaultTableModel buildTableModel(ResultSet rs)
        throws SQLException {

        ResultSetMetaData metaData = rs.getMetaData();

        // names of columns
        Vector<String> columnNames = new Vector<String>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }

        // data of the table
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }

        return new DefaultTableModel(data, columnNames);

    }
    
    
    @Override
    public void setNode(org.openide.nodes.Node selectedNode) {
        
        jTabbedPane1.removeAll();
        try{
            if (selectedNode == null) {
                setText("");
                return;    
            }
            AbstractFile file = selectedNode.getLookup().lookup(AbstractFile.class);
            if (file == null) {
                // non-content object passed in
                setText("");
                return;
            }
            
            if(file.canRead())
            {
                
                try {
                        
                    if(RawSQLFile.IsSQLLite(file)){
                        RawSQLFile sqlFile = new RawSQLFile(file);
                        sqlFile.CreatePages();
                        FullParse(file);
                        CreatTextTable(sqlFile.GetPageData());
                    }
                }
                catch (IOException ex){
                    System.out.println("Error reading files from database: " + ex.getLocalizedMessage());
                }
            }

        } catch (Exception ex) {
            setText("Error reading file: " + ex.getLocalizedMessage());
        }
    }
    
    private void CreatTextTable(String text){
        JScrollPane jScrollPane = new javax.swing.JScrollPane();
        JTextArea jTextArea = new javax.swing.JTextArea();

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jScrollPane.setViewportView(jTextArea);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(GrabPanel.class, "GrabPanel.jScrollPane3.TabConstraints.tabTitle"), jScrollPane);
        jTextArea.setText(text);
    }
    
    
    private void CreateDBTab(AbstractFile file, String tabName){
                
        JHorizontalFriendlyTable jTable = new JHorizontalFriendlyTable();
        JScrollPane jScrollPane = new javax.swing.JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

        jTable.setModel(FullSQLParse.GetSqlDataInTable(file,"Select * from " + tabName));
        jScrollPane.setViewportView(jTable);
        jScrollPane.setCorner(JScrollPane.UPPER_LEFT_CORNER, jTable.getTableHeader());
        
        
        
        Container tableParent = jTable.getParent();
        if(tableParent != null){
        
            if (jTable.getPreferredScrollableViewportSize().getWidth() > tableParent.getPreferredSize().getWidth())
              {
              jTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
              jTable.doLayout();
            }
        }
        jTable.setRowHeight(20);
        jTable.setDragEnabled(false);
        jTable.getTableHeader().setReorderingAllowed(false);
        
        
        jTabbedPane1.addTab(tabName, jScrollPane); // NOI18N

    }
    
    private void FullParse(AbstractFile file){
    
        ArrayList<String> tabs = FullSQLParse.GetTables(file);
        
        for(String tabname: tabs){
            CreateDBTab(file, tabname);
        }
    }  
    
   
    
    // set the text in the lable in the JPanel
    private void setText(String str) {
        //this.setText(str);
    }

    @Override
    public String getTitle() {
        return "SQLite";
    }

    @Override
    public String getToolTip() {
        return "test";
    }

    @Override
    public DataContentViewer createInstance() {
        return new GrabPanel();
    }

    @Override
    public Component getComponent() {
        return this;
    }

    @Override
    public void resetComponent() {
        setText("");
    }

    @Override
    public boolean isSupported(org.openide.nodes.Node node) {
        // get a Content datamodel object out of the node
        Content content = node.getLookup().lookup(Content.class);
        if (content == null) {
            return false;
        }
   
        // we only want files that are 1024 bytes or larger (for no good reason)
        if (content.getSize() < 1024) {
            return false;
        }
        return true;    
    }
    
    @Override
    public int isPreferred(org.openide.nodes.Node node) {
        // we return 1 since this module will operate on nearly all files
        return 1;
    }
}
